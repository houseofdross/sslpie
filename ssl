#!/usr/bin/env python3

import ssl
import socket
import argparse
import pprint
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from datetime import datetime
from termcolor import colored


class Certificate:
    def __init__(self):
        self.issuer = ""
        self.subject = ""
        self.alternativeNames = []
        self.notBefore = datetime.today()
        self.notAfter = datetime.today()

    def __repr__(self):
        return "<Certificate subject:\'{0}\' alternativeNames:\'{1}\' issuer:\'{2}\' notBefore:\'{3}\' notAfter:\'{4}\'>".format(
            self.subject, self.alternativeNames, self.issuer, self.notBefore, self.notAfter
        )


class CertGrabber:
    def __init__(self):
        self.context = ssl.SSLContext()
        self.context.verify_mode = ssl.CERT_OPTIONAL
        self.context.check_hostname = False
        self.context.load_default_certs()

    def get_certificate(self, domain, server):

        context = ssl._create_stdlib_context()
        with ssl.create_connection((server, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as sslsock:
                der_cert = sslsock.getpeercert(True)

        pem_cert = ssl.DER_cert_to_PEM_cert(der_cert)
        cert = x509.load_pem_x509_certificate(pem_cert.encode(), default_backend())

        certificate = Certificate()
        certificate.issuer = self.parse_issuer(cert.issuer)
        certificate.subject = self.parse_subject(cert.subject)
        certificate.notBefore = cert.not_valid_before
        certificate.notAfter = cert.not_valid_after
        certificate.alternativeNames = self.parse_alternative_names(cert.extensions)

        # print("Certificate: ", certificate)
        # version
        # serial
        # serial_number
        # public_key
        # signature_hash_algorithm
        # signature_algorithm_oid
        # signature
        # tbs_certificate_bytes
        # extensions

        return certificate

    @staticmethod
    def parse_issuer(issuer):
        issuer_props = {entry.oid._name: entry.value for entry in issuer}
        return "{0} - {1}".format(issuer_props['commonName'], issuer_props['organizationName'])

    @staticmethod
    def parse_subject(subject):
        return {entry.oid._name: entry.value for entry in subject}['commonName']

    @staticmethod
    def parse_alternative_names(cert_extensions):
        return [alt_name.value
                for extension in cert_extensions if extension.oid.dotted_string == '2.5.29.17'
                for alt_name in extension.value]


    # @staticmethod
    # def parse_date(cert_date):
    #     return datetime.strptime(cert_date, "%b %d %H:%M:%S %Y %Z") #Jul  4 00:00:00 2017 GMT


def parse_args():
    parser = argparse.ArgumentParser(description="Test the SSL certificates for a domain")
    parser.add_argument('domain', type=str, help='the domain to test for ssl certificates')
    parser.add_argument('--server', type=str, dest='server', default=False,
                        help='the server name or ip to connect to for testing')
    args = parser.parse_args()
    if args.server is False:
        args.server = args.domain

    return args


def main():

    args = parse_args()

    cert_grabber = CertGrabber()
    certificate = cert_grabber.get_certificate(args.domain, args.server)

    # print(colored('grey', 'grey'))
    # print(colored('red', 'red'))
    # print(colored('green', 'green'))
    # print(colored('yellow', 'yellow'))
    # print(colored('blue', 'blue'))
    # print(colored('magenta', 'magenta'))
    # print(colored('cyan', 'cyan'))
    # print(colored('white', 'white'))

    alternative_names = ""
    for alt_name in certificate.alternativeNames:
        color = 'green' if alt_name == args.domain else 'red'
        alternative_names += colored(alt_name, color) + "; "

    print(
        colored('Subject:', 'white'),
        colored(certificate.subject, 'green' if certificate.subject == args.domain else 'red')
    )
    print(
        colored('Alternative-Names:', 'white'),
        alternative_names
    )
    print(
        colored('Issuer:', 'white'),
        colored(certificate.issuer, 'cyan')
    )
    print(
        colored('Not-Before:', 'white'),
        colored(certificate.notBefore.strftime("%d %b %Y"), 'cyan')
    )
    print(
        colored('Not-After:', 'white'),
        colored(certificate.notAfter.strftime("%d %b %Y"), 'cyan')
    )

if __name__ == "__main__":
    main()
